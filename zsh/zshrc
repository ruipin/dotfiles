#########################################
# zshrc
# Author: Rui Pinheiro
#
# Main zsh configuration file
# Sets up a basic environment, and then loads all zshrc.d files

export USE_ZSH=1


#################
# Startup profiling: init
if [[ ! -z "$ZSH_ZSHRC_ZPROF" ]]; then
	zmodload "zsh/zprof"
fi
if [[ ! -z "$ZSH_ZSHRC_XTRACE" ]]; then
	# <minutes> <seconds>.<milliseconds> <command>
	PS4=$'%D{%M %S.%.} %N:%i> '
	exec 3>&2 2>"$ZSH_ZSHRC_XTRACE.$$"
	setopt xtrace prompt_subst
fi

# Helpers
function zshrc_zprof {
	local target="$ZSH_TMP/zshrc_zprof"
	if [[ "$1" -eq "1" ]]; then
		(
			setopt local_options null_glob
			rm -f "$target".*
		)
	fi
	ZSH_ZSHRC_ZPROF="$target" zsh -l -i -c exit
}
function zshrc_xtrace {
	local target="$ZSH_TMP/zshrc_xtrace"
	if [[ "$1" -eq "1" ]]; then
		(
			setopt local_options null_glob
			rm -f "$target".*
		)
	fi
	ZSH_ZSHRC_XTRACE="$target" zsh -l -i -c exit
}
function zshrc_time {
	time zsh -l -i -c exit
}


#################
# Obtain zsh configuration file paths
export ZSH_ZSHRC="$(readlink -f "${(%):-%N}")"
export ZSH_HOME=$(dirname "$ZSH_ZSHRC" )
hash -d zsh="$ZSH_HOME"
export DOTFILES=$(readlink -f "$ZSH_HOME/..")
hash -d dotf="$DOTFILES"

typeset -g ZSH_SCRATCH="$HOME/.zsh"
hash -d zshscratch="$ZSH_SCRATCH"

# Local zsh configuration
if [[ -d "$HOME/dotfiles_local" ]]; then
	export LOCAL_DOTFILES="$HOME/dotfiles_local"
	hash -d ldotf="$LOCAL_DOTFILES"
	typeset -g ZSH_HOME_LOCAL="$LOCAL_DOTFILES/zsh"
	hash -d lzsh="$ZSH_HOME_LOCAL"
fi



#################
# Temp folder
export ZSH_TMP="$ZSH_SCRATCH/tmp"
hash -d zshtmp="$ZSH_TMP"
if [[ ! -d "$ZSH_TMP" ]] ; then
	mkdir -p "$ZSH_TMP"
else
	find "$ZSH_TMP" -mindepth 1 -mtime +1 -delete
fi


#################
# "zshrc.d" directory handling
#
# Responsible for loading all files inside the "zshrc.d" folders
#
# Supports a separate, local dotfiles directory with an additional zshrc.d folder
# Files inside this "local zshrc.d" get loaded as if they were in the "primary zshrc.d"
# NOTE: If a file in "local zshrc.d" has the same name as a file in "primary zshrc.d",
#		only the local version is loaded
#
# For this, the following steps are executed:
# 1. Find all files inside both zshrc.d folders, as well as sub-folders,
# 2. Obtaining their paths relative to the corresponding zshrc.d directory
# 3. Sort relative paths by name and remove duplicates
# 4. Source (in order) the files, preferring the version in the "local zshrc" if both exist
#
# During step 4, files can be sourced in different ways:
#
# - By default =>
#    Files are sourced using the "." zsh builtin
#
# - If _zshrcd_concatenate!=0 =>
#    Files are first concatenated into a "zshrc.d.cat" file,
#    which is then sourced. If "zshrc.d.cat" already exists, then it is sourced directly.
#    This allows a single file to be read, which can optimize systems where the "zshrc.d" directories
#    are in a network filesystem, as it reduces the number of file accesses.
#    For _zshrcd_concatenate=2, files are only concatenated if ZSH_HOME is inside a "nfs" mount point
#
# - If _zshrcd_concatenate!=0 && _zshrcd_compile=1 =>
#    Concatenates the files as above, but also uses the "zcompile" builtin to pre-parse "zshrc.d.cat".
#    This should (very slightly) improve the zsh startup time, and allows zsh to map the file to memory,
#    sharing its memory page between processes.

function _zshrcd {
	# Configuration
	typeset -g _zshrcd_concatenate=2
	typeset -g _zshrcd_compile=1
	local _zshrcd_debug=0


	# Other variables (do not modify)
	typeset -g _zshrcd="$ZSH_HOME/zshrc.d"
	hash -d zshrcd="$_zshrcd"
	typeset -g _zshrcd_local="$ZSH_HOME_LOCAL/zshrc.d"
	hash -d lzshrcd="$_zshrcd_local"
	typeset -g zshrcd_scratch="$ZSH_SCRATCH/zshrcd"
	typeset -g _zshrcd_regen=0
	local _zshrcd_fallback=0


	# Debug helper
	if [[ "$_zshrcd_debug" -eq "1" ]]; then
		function _zshrcd_debug {
			echo "[zshrc.d:dbg] $@"
		}
	else
		function _zshrcd_debug {}
	fi

	# Detect network file system
	if [[ "$_zshrcd_concatenate" -eq "2" ]]; then
		local fstype err
		fstype="$( stat -f -L -c %T "$ZSH_HOME" 2>/dev/null )"
		err="$?"

		_zshrcd_debug "\$ZSH_HOME file system is '$fstype'"
		if [[ "$err" -eq "0" && "$fstype" = "nfs" ]]; then
			_zshrcd_concatenate=1
		else
			_zshrcd_concatenate=0
		fi
	fi

	# Clean _zshrcd files
	if [[ "$_zshrcd_concatenate" -ne "0" ]]; then
		function regen_zshrcd {
			setopt local_options rmstarsilent
			[[ -d "$zshrcd_scratch" ]] && \rm -f "$zshrcd_scratch/"*
			exec zsh -l -i
		}
	fi

	# Check for zsh version
	autoload -U is-at-least
	if ! is-at-least "5" ; then
		echo "[zshrc.d] WARNING: Detected old zsh version $ZSH_VERSION! Enabling fall-back mode, expect things to break."
		_zshrcd_concatenate=0
		_zshrcd_compile=0
		_zshrcd_fallback=1
	fi

	# Iterates through all files inside zshrc.d
	# Calls "$1" for each file to be sourced
	function _zshrcd_iterate {
		# Collect files
		# NOTE: "(-.)" is a globbing qualifier to match regular files (and symlinks to regular files) only
		local sourcefiles

		(){ # anonymous function to avoid setting extended_glob permanently
			local filemask
			setopt local_options extended_glob
			if [[ "$_zshrcd_fallback" -ne "1" ]] ; then
				filemask='***/*(-.N)'
				sourcefiles=("$_zshrcd/"${~filemask} "$_zshrcd_local/"${~filemask})
			else
				filemask='***/*'
				sourcefiles=("$_zshrcd/"${~filemask})
			fi

			# Remove path prefix up to the zshrc.d folder
			sourcefiles=(${sourcefiles#*/zshrc.d/})

			# Sort and remove duplicates
			sourcefiles=(${(@ui)sourcefiles})

			# Remove ".ignore"/".bak" files and folders
			sourcefiles=(${(@)sourcefiles:#*.(ignore|bak)(/*|)})
		}

		# Source files
		for f in $sourcefiles ; do
			if [[ -f "$_zshrcd_local/$f" ]]; then
				$1 "$_zshrcd_local/$f"
			else
				$1 "$_zshrcd/$f"
			fi
			_zshrcd_debug "Including file '$f'."
		done; unset f
	}

	# If we want to concatenate/compile the files
	if [[ "$_zshrcd_concatenate" -ne "0" ]]; then
		# Initialize directory
		[[ ! -d "$zshrcd_scratch" ]] && mkdir -p "$zshrcd_scratch"
		typeset -g _zshrcd_cat="$zshrcd_scratch/zshrc.d.cat"

		# Regenerate zshrc.d.cat if it doesn't exist
		if [[ ! -f "$_zshrcd_cat" ]]; then
			echo "[zshrc.d] Generating 'zshrc.d.cat'..."
			_zshrcd_regen=1

			[[ -f "$_zshrcd_cat" ]] && rm -f "$_zshrcd_cat"
			[[ ! -f "$_zshrcd_cat" ]] && touch "$_zshrcd_cat"

			function do_zshrcd_cat {
				# Wrap concatenated files in functions, to better pretend they are files
				echo "\n\n#****************************************\n#** $1\n(){\nlocal 0=${(qqqq)1}\n" >> "$_zshrcd_cat"
				cat "$1" >> "$_zshrcd_cat"
				echo "\n} #** end of $1\n#****************************************\n\n" >> "$_zshrcd_cat"
			}

			_zshrcd_iterate "do_zshrcd_cat"
			unfunction do_zshrcd_cat
		fi

		# Compile zshrc.d.cat if it hasn't been compiled yet
		if [[ "$_zshrcd_compile" -ne "0" && ! "$_zshrcd_cat.zwc" -nt "$_zshrcd_cat" ]]; then
			echo "[zshrc.d] Compiling 'zshrc.d.cat'..."
			[[ -f "$_zshrcd_cat.zwc" ]] && rm -f "$_zshrcd_cat.zwc"
			zcompile -M "$_zshrcd_cat"
		fi

		# Source zshrc.d.cat
		. "$_zshrcd_cat"

	# Otherwise, just source them all individually
	else
		_zshrcd_iterate '.'
	fi

	# Cleanup
	unfunction -m "_zshrcd*"
	unset -m "_zshrcd*"
}; _zshrcd


################
# Startup profiling: end
if [[ ! -z "$ZSH_ZSHRC_ZPROF" ]]; then
	zprof > "$ZSH_ZSHRC_ZPROF.$$"
	zmodload -u "zsh/zprof"
fi

if [[ ! -z "$ZSH_ZSHRC_XTRACE" ]]; then
	unsetopt xtrace
	exec 2>&3 3>&-
fi
