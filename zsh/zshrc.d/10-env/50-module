#########################################
# env/modules
# Author: Rui Pinheiro
#
# Utilities for better handling of the 'module' command

# So that scripts can query whether we are using our custom module implementation
typeset -g _has_custom_module=0
function has_custom_module {
	return "$_has_custom_module"
}

# Main 'module' functionality
# Should be called after DEPOT_SETUP_ROOT is defined
function init_custom_module {
	if [[ -z "$DEPOT_SETUP_ROOT" ]]; then
		echo_error "\$DEPOT_SETUP_ROOT undefined!" "module"
		return 1
	fi

	_has_custom_module=1
	typeset -g _module_wrapped=0

	#####
	# module wrapper
	function _module_wrap {
		#echo_debug "$0 $*" "_module_wrap"

		# Store variables that are discarded by modules-init
		local tz="$TZ"

		# Initialize module subsystem
		source_sh "$DEPOT_SETUP_ROOT/init/sh.d/modules-init"
		source_sh "$DEPOT_SETUP_ROOT/init/sh.d/shell-config"

		# Wrap module subsystem
		eval "function _orig_$( typeset -f module )"

		function module {
			_module_wrapper "$@"
		}

		_module_wrapped=1

		# Purge existing modules and load defaults
		module orig purge
		if [[ ! -z "$_module_defaults" ]]; then
			module load "$@" "${_module_defaults[@]}" \
				|| return "$?"
		fi

		# Restore variables
		[[ ! -z "$tz" ]] && export TZ="$tz"

		return 0
	}

	function _module_wrapper {
		#echo_debug "$0 $*" "_module_wrapper"

		local res=0
		case "$1" in
		"autoload")
			_module_autoload "${@:2}"
			res="$?"
			;;
		"alias")
			_module_alias "${@:2}"
			res="$?"
			;;
		"has_alias")
			_module_has_alias "${@:2}"
			res="$?"
			;;
		"add_default")
			_module_add_default "${@:2}"
			res="$?"
			;;
		"purge-if-loaded")
			res=0
			if [[ ! -z "$LOADEDMODULES" ]]; then
				module purge
				res="$?"
			fi
			;;
		"purge"|"wrap"|"rewrap")
			echo_debug "Purging modules..." "module purge"
			_module_wrap
			res="$?"
			;;
		"load")
			_module_load "${@:2}"
			res="$?"
			;;
		# NOTE:
		# Any call to modules should go through this command, to make sure the local prefix is not broken
		"orig")
			is_false "$_module_wrapped" && _module_wrap
			_orig_module "${@:2}"
			res="$?"
			is_function "activate_local_prefix" && activate_local_prefix 1
			is_function "fix_locale" && fix_locale
			;;
		*)
			module orig "$@"
		esac

		return "$res"
	}

	function module {
		_module_wrapper "$@"
	}

	function mgrep {
		is_false "$_module_wrapped" && _module_wrap
		unfunction "$0"

		local mgrep_cmd=$( alias mgrep )
		mgrep_cmd="${mgrep_cmd#*=\'}"
		mgrep_cmd="${mgrep_cmd% *}"
		"$mgrep_cmd" "$*"
	}

	#####
	# extra 'module' functionality
	typeset -gA _module_deps=()
	typeset -gA _module_cmd_deps=()
	typeset -gA _module_aliases=()
	typeset -g  _module_defaults=()

	typeset -g _module_alias_symbol="%"
	typeset -g _module_name_symbol=":"

	function _module_alias {
		local arg
		local old_ifs="$IFS"
		local IFS="="
		for arg in "$@" ; do
			local arr=("${=arg}")
			local malias="$arr[1]"
			local mname="$arr[2,-1]"

			_module_aliases[$malias]="$mname"
		done
		IFS="$old_ifs"
		return 0
	}

	function _module_has_alias {
		local mname="$1"
		[[ ! -z "$_module_aliases[$mname]" ]] && return 0
		return 1
	}

	#typeset -g _module_load_params=()
	function _module_load {
		#echo_debug "_module_load $*" "module load"
		local res=0
		local load_params=()

		local arg
		local resolve_only=0
		for arg in "$@" ; do
			case "$arg" in
			# Add only
			"-ro"|"--resolve"|"--resolve-only")
				resolve_only=1
				;;
			# Module name
			*)
				local mname="$arg"
				# Trigger dependencies
				local mname_deps="${mname#($_module_name_symbol|$_module_alias_symbol)}"
				local mdeps="${_module_deps[$mname_deps]% }"
				if [[ ! -z "$mdeps" ]]; then
					# Resolve the dependency
					# NOTE: $mdeps is unquoted on purpose
					_module_load --resolve-only "${=mdeps}" || { res="$?" && break }
					load_params+=("${_module_load_return[@]}")
					unset _module_load_return
				fi

				# Resolve aliases unless module name starts with ':'
				if [[ "$mname[1]" != "$_module_name_symbol" ]]; then
					local malias="${mname#$_module_alias_symbol}"
					local mresolved="$_module_aliases[${malias}]"
					if [[ "$mname[1]" = "$_module_alias_symbol" && -z "$mresolved" ]]; then
						echo_error "module load: alias '$malias' does not exist" "module load"
						return 1
					elif [[ ! -z "$mresolved" ]]; then
						# NOTE: $mresolved is unquoted on purpose
						_module_load --resolve-only "${=mresolved}" || { res="$?" && break }
						load_params+=("${_module_load_return[@]}")
						unset _module_load_return
						continue
					fi
				fi

				# Non-alias modules
				mname="${mname#$_module_name_symbol}"
				[[ "$mname" = ".none" ]] && continue # mname=".none" means a virtual module
				if is_true "$_module_wrapped" && [[ "$LOADEDMODULES" = *"$mname"* ]]; then
					#echo_debug "'$mname' already loaded" "module load"
				else
					# Set module is to be loaded
					load_params+=("$mname")
				fi
			esac
		done

		if [[ "$res" -eq "0" ]]; then
			# Remove duplicates
			load_params=("${(@u)load_params[@]}")

			# If we are in resolve-only mode, return $load_params
			if is_true "$resolve_only" ; then
				typeset -g _module_load_return=("${load_params[@]}")
			else
				# Load and wrap the real 'module' command
				if is_false "$_module_wrapped" ; then
					# TODO: --resolve-only ??
					_module_wrap --resolve-only || return "$?"
					if [[ "${#_module_load_return}" -ne "0" ]]; then
						load_params=("${_module_load_return[@]}" "${load_params[@]}")
						unset _module_load_return
						load_params=("${(@u)load_params[@]}")
					fi
				fi

				# If there is anything to load
				if [[ "$#load_params" -ne "0" ]]; then
					# Load modules and reset list of modules to be loaded
					echo_debug "Loading module(s) '$load_params'..." "module load"
					module orig load "${load_params[@]}" || return "$res"
				fi
			fi
		else
			unset _module_load_return
		fi

		return "$res"
	}

	function _module_autoload_handler {
		local cmd="$1"
		local args=("${@:2}")
		local res

		# Make sure this lazy-loader only runs once
		unfunction "$cmd"

		# Get list of module deps
		local mnames="${_module_cmd_deps[$cmd]% }"
		#echo_debug "Lazy-loading module(s) '${mnames}'..." "module autoload"

		# Load it
		# NOTE: $mnames is unquoted on purpose
		module load $mnames
		res="$?"
		[[ "$res" -ne "0" ]] && return "$res"

		# Clear command dependencies
		_module_cmd_deps[$cmd]=""

		# Execute shadowed command
		#echo_debug "$cmd $args" "module_autoload"
		"$cmd" "${args[@]}"
	}

	function _module_autoload {
		local mname="$1"
		local commands=("${@:2}")

		# Check for implicit alias
		local malias
		if [[ "$mname" = *"="* ]]; then
			_module_alias "$mname"
			mname="${mname##*=}"
			malias="$mname"
		# Virtual aliases
		elif [[ "$mname[1]" = "$_module_alias_symbol" ]]; then
			malias="${mname#$_module_alias_symbol}"
			_module_alias "${malias}=.none"
		fi

		# No need to autoload already-loaded modules
		if is_true "$_module_wrapped" && [[ "$LOADEDMODULES" = *"$mname"* ]]; then
			#echo_debug "Module $mname already loaded" "module autoload"
			return 0
		fi

		# Shadow commands
		local seen_mod=1
		local mdeps=""
		local cmd
		for cmd in $commands ; do
			case "$cmd" in
			"-c"|"--cmd"|"--commands")
				seen_mod=0
				;;
			"-m"|"--mod"|"--modules")
				seen_mod=1
				;;
			"-d"|"--default")
				module add_default "$mname"
				;;
			*)
				# Module dependencies
				if [[ "$seen_mod" -eq 1 || "$cmd[1]" = "$_module_name_symbol" ]] ; then
					local mdep="${cmd#$_module_name_symbol}"
					mdeps+="$mdep "

				# Commands
				else
					function "$cmd" { _module_autoload_handler "$0" "$@" ; }
					_module_cmd_deps[$cmd]+="$mname "
				fi
			esac
		done

		_module_deps[${malias}]="$mdeps"
		return 0
	}

	function _module_add_default {
		_module_defaults+=("$@")
	}
}
