// Place your key bindings in this file to override the defaultsauto[]
[
    // Move between groups using Ctrl+hjkl / Ctrl+Arrows
    { "key": "ctrl+k"    , "command": "workbench.action.navigateUp"    },
    { "key": "ctrl+up"   , "command": "workbench.action.navigateUp"    },
    { "key": "ctrl+j"    , "command": "workbench.action.navigateDown"  },
    { "key": "ctrl+down" , "command": "workbench.action.navigateDown"  },
    { "key": "ctrl+h"    , "command": "workbench.action.navigateLeft"  },
    { "key": "ctrl+left" , "command": "workbench.action.navigateLeft"  },
    { "key": "ctrl+l"    , "command": "workbench.action.navigateRight" },
    { "key": "ctrl+right", "command": "workbench.action.navigateRight" },

    // Move editors between groups with Ctrl+hjkl / Ctrl+Arrows
    { "key": "ctrl+shift+k"    , "command": "workbench.action.moveEditorToAboveGroup", "when": "editorFocus" },
    { "key": "ctrl+shift+up"   , "command": "workbench.action.moveEditorToAboveGroup", "when": "editorFocus" },
    { "key": "ctrl+shift+j"    , "command": "workbench.action.moveEditorToBelowGroup", "when": "editorFocus" },
    { "key": "ctrl+shift+down" , "command": "workbench.action.moveEditorToBelowGroup", "when": "editorFocus" },
    { "key": "ctrl+shift+h"    , "command": "workbench.action.moveEditorToLeftGroup" , "when": "editorFocus" },
    { "key": "ctrl+shift+left" , "command": "workbench.action.moveEditorToLeftGroup" , "when": "editorFocus" },
    { "key": "ctrl+shift+l"    , "command": "workbench.action.moveEditorToRightGroup", "when": "editorFocus" },
    { "key": "ctrl+shift+right", "command": "workbench.action.moveEditorToRightGroup", "when": "editorFocus" },

    // Move between editors within a group with Ctrl+A/D
    { "key": "ctrl+d", "command": "workbench.action.nextEditorInGroup"    , "when": "editorFocus" },
    { "key": "ctrl+a", "command": "workbench.action.previousEditorInGroup", "when": "editorFocus && !findInputFocussed" },

    // Move editors within a group with Ctrl+Shift+A/D
    { "key": "ctrl+shift+d", "command": "workbench.action.moveEditorRightInGroup", "when": "editorFocus" },
    { "key": "ctrl+shift+a", "command": "workbench.action.moveEditorLeftInGroup" , "when": "editorFocus" },

    // Close Editor Group with Ctrl+W
    { "key": "ctrl+w", "command": "workbench.action.closeGroup" },

    // Rename in file explorer with R
    // Condition copied from default F2 keybinding
    { "key": "r", "command": "renameFile", "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },

    // Disable replace keybindings
    { "key": "ctrl+h", "command": "-editor.action.startFindReplaceAction", "when": "editorFocus || editorIsOpen" },
    { "key": "ctrl+shift+h", "command": "-workbench.action.replaceInFiles" },

    // Do not select input suggestions with "Enter". Enter should be line-breaks, that is what "Tab" is for.
    { "key": "enter", "command": "-acceptSelectedSuggestion", "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus" },

    // Toggle side-bar with Ctrl-N
    { "key": "ctrl+n", "command": "-workbench.action.files.newUntitledFile" },
    { "key": "ctrl+n", "command": "workbench.action.toggleSidebarVisibility" },

    // Inline Suggestions / Github Copilot
    {
        "key": "ctrl+tab",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineEditIsVisible && tabShouldAcceptInlineEdit && !editorHoverFocused || inlineSuggestionVisible && !editorHoverFocused"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "editor.action.inlineSuggest.acceptNextLine",
        "when": "inlineEditIsVisible && tabShouldAcceptInlineEdit && !editorHoverFocused || inlineSuggestionVisible && !editorHoverFocused"
    },
    {
        "key": "ctrl+tab",
        "command": "editor.action.inlineSuggest.jump",
        "when": "inlineEditIsVisible && tabShouldJumpToInlineEdit && !editorHoverFocused && !suggestWidgetVisible"
    },
    { "key": "ctrl+oem_8" /* oem_8 = ` */, "command": "editor.action.inlineSuggest.showPrevious", "when": "inlineSuggestionVisible && !editorReadonly" },
    { "key": "ctrl+1", "command": "editor.action.inlineSuggest.showNext", "when": "inlineSuggestionVisible && !editorReadonly" },
    { "key": "alt+i", "command": "editor.action.inlineSuggest.trigger", "when": "editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible" },

    { "key": "ctrl+tab", "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup", "when": "!activeEditorGroupEmpty" },
    { "key": "ctrl+tab", "command": "-workbench.action.quickOpenNavigateNextInEditorPicker", "when": "inEditorsPicker && inQuickOpen" },

    // Extension - Smart Delete
    // Use Shift+Delete and Shift+Backspace
    { "key": "shift+delete"   , "command": "smartDelete.right" , "when": "editorTextFocus" },
    { "key": "delete"         , "command": "-smartDelete.right", "when": "editorTextFocus" },
    { "key": "shift+backspace", "command": "smartDelete.left"  , "when": "editorTextFocus" },
    { "key": "backspace"      , "command": "-smartDelete.left" , "when": "editorTextFocus" },

    // Disable terminal keybindings that overlap with common vim keybindings
    { "key": "ctrl+v", "command": "-workbench.action.terminal.paste", "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },

    // Automatically added keybindings (empty keybind is a hack to force VSCode to add new keybindings here)
    {},
]