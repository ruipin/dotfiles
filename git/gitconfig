[user]
  # Default author name
  name = Rui Pinheiro

[core]
  # Set a local excludes file
  excludesfile = ~/.gitignore

  # Preload the index in parallel
  preloadindex = true

  # Helps with large indexes by splitting the index file
  splitIndex = true

  # Don't perform any output conversion with regards to CR/LF
  autocrlf = input

  # Warn on specific whitespace issues
  whitespace = blank-at-eol,space-before-tab,-blank-at-eof

  # The untracked cache makes git status operations on large repos much faster
  # Some file systems do not support it (it relies on directory mtime) so we should not enable it by default
  # Test support by using "git update-index --test-untracked-cache"
  # If the test passes, enable it for the current repo with "git update-index --untracked-cache"
  untrackedCache = keep

[diff]
  # Use vimdiff for diffs
  tool = vimdiff

  # Use a better diff algorithm
  algorithm = histogram

[difftool]
  # Do not ask which difftool to use
  prompt = false

[rerere]
  # Do not enable rerere (Reuse Recorded Resolution)
  enabled = false

[merge]
  # Set default conflict style
  conflictstyle = diff3

[push]
  # Block pushes if submodules are not present on the remote
  #recurseSubmodules = check
  # 'git push' by default to tracking branch
  default = upstream

[pull]
  # Do not automatically rebase when doing 'git pull', only allow fast-forward rebases
  ff = only

[status]
  # Submarize the submodule status when doing 'git status'
  submodulesummary = 1

[fetch]
  # Automatically prune stale remote branches on fetch
  prune = 1

  # Automatically prune stale tags on fetch
  pruneTags = 1

[alias]
  ##############
  # Simple aliases

  # clone
  cl = clone

  # checkout
  co = checkout
  cob = checkout -b
  coB = checkout -B
  cou = !sh -c 'git checkout -B \"${1}\" \"${1}@{u}\"' -

  # add
  a = add
  aa = add -A
  ai = add --interactive
  ap = add --patch

  # reset
  rst     = reset
  rsth    = reset --hard
  rstu    = reset @{u}
  rsthu   = reset --hard @{u}

  unstage = reset HEAD --

  # diff
  d = diff

  # commit
  ci  = commit
  cim = commit -m
  ca  = commit --amend --no-edit
  cae = commit --amend

  # branch
  b = branch -vv
  bd = branch -d
  bD = branch -D

  # cherry-pick
  cp = cherry-pick
  cpc = cherry-pick --continue
  cpa = cherry-pick --abort

  # rebase
  rb = rebase
  rbu = rebase @{u}
  rba = rebase --abort
  rbc = rebase --continue
  rbs = rebase --skip
  rbi = rebase -i
  rbiu = rebase -i @{u}

  # merge
  squash = merge --ff --squash
  squash-merge = !git squash

  ff-merge = merge --ff-only
  ff = !git ff-merge

  # fetch
  f              = fetch
  fa             = fetch --all
  fat            = fetch --all --tags
  ft             = fetch --tags

  # blame
  praise = blame

  # status
  st       = status
  s        = status -s
  sttr     = !git st --untracked-files=no
  str      = !git s  --untracked-files=no

  slow-status = status --untracked-files=normal --ignore-submodules=none
  slow-st     = !git slow-status
  slow-s      = !git slow-status -s


  ##############
  # Current revision
  # NOTE: Separate quiet versions are necessary to guarantee the output is really silent
  #       when used in scripts or other aliases ('-q' is not enough)
  rev      = !sh -c 'git rev-parse --verify --short    \"${@-HEAD}\"' -
  rev-q    = !sh -c 'git rev-parse --verify --short -q \"${@-HEAD}\" 2> /dev/null' -
  abbrev   = !sh -c 'git rev-parse --verify --abbrev-ref    \"${@-HEAD}\"' -
  abbrev-q = !sh -c 'git rev-parse --verify --abbrev-ref -q \"${@-HEAD}\" 2> /dev/null' -


  ##############
  # Diff

  # diff last commit against previous
  dlast = diff --cached HEAD^
  dl = !git dlast

  # diff against upstream
  diff-push = diff @{upstream}..HEAD
  dpush = !git diff-push
  dp    = !git diff-push


  ###################
  # Log

  # log last commit
  last = log -1 HEAD --decorate
  l = !git last

  # log using a single line per commit
  log1 = log --oneline --date=short --pretty=format:\"%Cred%h %C(yellow)%ad%C(cyan)%d%Creset %s %C(bold)(%an)%Creset\"
  l1 = !git log1

  # log commits showing changed files
  log-changes = log --pretty=format:\"%C(yellow)%h%Cred%d %Creset%s%Cblue [%cn]\" --first-parent --decorate --stat
  lc           = !git list-changes

  # log commits not in upstream
  log-push = !git graph @{upstream}..HEAD
  lpush = !git list-push
  lp    = !git list-push


  ###################
  # Graphing

  # short-hand
  graph = !git log1 --graph
  gr = !git graph

  # graph all branches
  history = !bash -c 'git graph --full-history \"${1-HEAD}\" $(git abbrev-q \"${1-HEAD}@{u}\") \"${@:2}\"' -
  hist = !git history
  h = !git history

  # graph a current branch, together with its upstream
  graph-upstream = !bash -c 'git graph --first-parent \"${1-HEAD}\" $(git abbrev-q \"${1-HEAD}@{u}\") \"${@:2}\"' -
  gru = !git graph-upstream

  # graph current branch (old alias, superseded by 'graph-upstream')
  lhistory = !git graph-upstream
  lhist = !git lhistory
  lh = !git lhistory


  ##################
  # Search
  grep = grep -Ii


  ##################
  # Gerrit
  get-publish-branch = "!bash -c 'f(){ \
      BRANCH_IN=\"${1:-HEAD}\" ; \
      BRANCH=\"$(git abbrev-q \"${BRANCH_IN}@{u}\")\" ; \
      ORIGIN_BRANCH=\"${BRANCH#origin\\/}\" ; \
      if [[ -z \"$ORIGIN_BRANCH\" || \"$BRANCH\" == \"$ORIGIN_BRACH\" ]]; then \
        BRANCH=\"$(git abbrev-q \"${BRANCH_IN}\")\" ; \
        if [[ -z \"$BRANCH\" ]]; then \
          echo \"$BRANCH_IN\" ; \
        else \
          echo \"$BRANCH\" ; \
        fi ; \
        return 0 ; \
      fi ; \
      echo \"${ORIGIN_BRANCH}\" ; \
      return 0 ; \
    }; \
    f \"$@\" ' -"
  publish = !sh -c 'git push origin \"${2-HEAD}:refs/for/${1-$(git get-publish-branch)}\" ' -
  draft   = !sh -c 'git push origin \"${2-HEAD}:refs/for/${1-$(git get-publish-branch)}%wip\" ' -
  wip     = !git draft
  private = !sh -c 'git push origin \"${2-HEAD}:refs/for/${1-$(git get-publish-branch)}%private\" ' -


  ##################
  # Aliases
  alias = "!git config -l | grep alias | cut -c 7- | sort -u -k1 -t= | sed \"s/ \\+/ /g\""


  ##################
  # Directory queries
  root = rev-parse --show-toplevel
  dir  = rev-parse --absolute-git-dir
